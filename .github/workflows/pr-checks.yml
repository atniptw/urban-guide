name: PR Quality Checks

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript compilation check
        run: npm run typecheck
        
      - name: ESLint validation
        run: npm run lint
        continue-on-error: false

      - name: Prettier formatting check
        run: npm run format:check

      - name: Run tests with coverage
        run: npm run test:coverage
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: Coverage summary comment
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read coverage summary if it exists
            let coverageComment = '## üìä Test Coverage Report\n\n';
            const coveragePath = path.join(process.env.GITHUB_WORKSPACE, 'coverage', 'coverage-summary.json');
            
            try {
              if (fs.existsSync(coveragePath)) {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverage.total;
                
                coverageComment += '| Metric | Coverage | Details |\n';
                coverageComment += '|--------|----------|----------|\n';
                coverageComment += `| **Lines** | ${total.lines.pct}% | ${total.lines.covered}/${total.lines.total} |\n`;
                coverageComment += `| **Statements** | ${total.statements.pct}% | ${total.statements.covered}/${total.statements.total} |\n`;
                coverageComment += `| **Functions** | ${total.functions.pct}% | ${total.functions.covered}/${total.functions.total} |\n`;
                coverageComment += `| **Branches** | ${total.branches.pct}% | ${total.branches.covered}/${total.branches.total} |\n`;
                
                // Check if coverage meets thresholds
                const thresholds = {
                  lines: 90,
                  statements: 90,
                  functions: 90,
                  branches: 80
                };
                
                let failedThresholds = [];
                for (const [key, threshold] of Object.entries(thresholds)) {
                  if (total[key].pct < threshold) {
                    failedThresholds.push(`${key}: ${total[key].pct}% < ${threshold}%`);
                  }
                }
                
                if (failedThresholds.length > 0) {
                  coverageComment += '\n‚ö†Ô∏è **Coverage below thresholds:**\n';
                  failedThresholds.forEach(f => {
                    coverageComment += `- ${f}\n`;
                  });
                } else {
                  coverageComment += '\n‚úÖ **All coverage thresholds met!**\n';
                }
              } else {
                coverageComment += '‚ö†Ô∏è No coverage report found.\n';
              }
            } catch (error) {
              console.error('Error reading coverage:', error);
              coverageComment += '‚ùå Error reading coverage report.\n';
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Test Coverage Report')
            );
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: coverageComment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageComment
              });
            }

      - name: Build validation
        run: npm run build

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build output directory 'dist' not found!"
            exit 1
          fi
          
          if [ ! -f "dist/cli/index.js" ]; then
            echo "‚ùå CLI entry point not found in build output!"
            exit 1
          fi
          
          echo "‚úÖ Build output verified successfully"
          echo "üì¶ Build artifacts:"
          find dist -type f -name "*.js" | head -20

      - name: Check bundle size
        run: |
          echo "üìè Checking bundle sizes..."
          total_size=$(find dist -name "*.js" -type f -exec stat -c%s {} + | awk '{sum+=$1} END {print sum}')
          max_size=$((5 * 1024 * 1024))  # 5MB max for now
          
          echo "Total JS bundle size: $(($total_size / 1024))KB"
          
          if [ $total_size -gt $max_size ]; then
            echo "‚ö†Ô∏è Warning: Bundle size exceeds $(($max_size / 1024 / 1024))MB"
          else
            echo "‚úÖ Bundle size within limits"
          fi

  status-check:
    name: PR Status Summary
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: always()
    
    steps:
      - name: Summary status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobStatus = '${{ needs.quality-checks.result }}';
            const statusEmoji = jobStatus === 'success' ? '‚úÖ' : '‚ùå';
            const statusText = jobStatus === 'success' ? 'All checks passed!' : 'Some checks failed';
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'PR Quality Summary',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: jobStatus === 'success' ? 'success' : 'failure',
              output: {
                title: `${statusEmoji} ${statusText}`,
                summary: `Quality checks ${jobStatus}. See workflow details for more information.`
              }
            });